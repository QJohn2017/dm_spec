basic = {
    n_dim   =   3; // number of dimensions
    n_lvl   =   3; // number of energy levels (including gs)
    n_dpl   =   2; // number of (transition) dipoles
};

euler = { // molecular orientation
    phi     =   0.0;
    theta   =   0.0;
    psi     =   0.0;
};

repr = {
    type    =   "generic";

    generic = {
        E = "cfg/energy.cfg";
        mu = "cfg/dipole.cfg";
    };

    dimer = {
        E = ( 16200.0, 15800.0 );
        J = 300.0;
        mu = ( (0.0, 0.0, 1.0),
               (0.0, 0.0, -0.36) );
    };
};
// skip it!! [m]
position = ( 1e-6, 1e-6, 1e-6 );

field = (
      // number of blocks decides number of pulses
      // in each block, you specifiy the individual parameters
    {
        W       =   16000.0; // central freq [cm^-1]
        E0      =   1e-4; // field amplitude [a.u.]
        FWHM    =   15.0; // pulse width [fs]
        kdir    =   ( 0.0, 0.5, 0.0 ); // k-vector [euler,PI]
        Edir    =   0.0; // E-vector [euler,PI]
        tc      =   -200.0; // time [fs]
    },
    {
        W       =   16000.0;
        E0      =   1e-4;
        FWHM    =   15.0;
        kdir    =   ( 0.2, 0.5, 0.0 );
        Edir    =   0.0;
        tc      =   -100.0;
    },
    {
        W       =   16000.0;
        E0      =   1e-4;
        FWHM    =   15.0;
        kdir    =   ( 0.4, 0.5, 0.0 );
        Edir    =   0.0;
        tc      =   0.0;
    } );

bath = {
    type    =   "const_redfield_file";

    const_redfield_file = { // decay rate specified by user
        n_tensor = 3;
        filename = "cfg/decay.cfg";
    };

    // better not use this...
    const_redfield_calc = { // calc by redfield formula
        g       =   0.004; // coupling strength [a.u.]
        w_cut   =   50.0; // cutting freq [cm^-1]
        T       =   298.0; // temperature [K]
    };

    const_dimer = {
        g       =   0.004;
        w_cut   =   50.0;
        T       =   298.0;
    };
};

time = {
    nt      =   480; // output time points
    // nt      =   960;
    t0      =   -650.0; // starting time [fs]
    //    t0      =   -300.0;
    t1      =   500.0; // ending time [fs]
};
// skip this...
file = {
    dm      =   "res/dm"; // density matrix, only #-DUSE_MPI
    ef      =   "res/ef"; // electric fields
    time    =   "res/time"; // time grid
    info    =   "res/info"; // input information

    grid_1d =   "res/grid_1d";
    ppar_1d =   "res/ppar_1d"; // *IMPORTANT* partial polar.
    ptot_1d =   "res/ptot_1d"; // total polar.

    grid_2d =   "res/grid_2d";
    ppar_2d =   "res/ppar_2d"; // *IMPORTANT* partial polar.
    ptot_2d =   "res/ptot_2d"; // total polar

    config  =   "res/config"; // misc. config info
    orient  =   "res/orient"; // mol. orientation
    kuvl    =   "res/kuvl"; // unit vec of k in lab. frame
    kuvm    =   "res/kuvm"; // unit vec of k in mol. frame
    kl      =   "res/kl"; // k-vec lab. frame
    km      =   "res/km"; // k-vec mol. frame
    euvl    =   "res/euvl"; // unit e-vec lab. frame
    euvm    =   "res/euvm"; // unit e-vec mol. frame
    rl      =   "res/rl"; // position of mol in lab frame
    rm      =   "res/rm"; // position of mol in mol frame
    log     =   "res/log";
};

//
seidner = { // different orders of partial polarization
    // you need to include to compose the total polarization
    // if 3rd order is not enough to get convergent result,
    // include 5th order as well
    // the convergence can be checked by partial polarizations
    // should follow causal relation
    // for sysmmetric system, using odd orders is enough
    // for non-inversion-sysmetric system, also consider even orders
    index = (
             // 1 st order of emission
             (1, 0, 0), (-1,  0,  0), // 0, 1
             (0, 1, 0), ( 0, -1,  0), // 2, 3
             (0, 0, 1), ( 0,  0, -1), // 4, 5

             // 3 rd order of emission, echo given by 37 or 40
             (3, 0, 0), (-3,  0,  0), //  6,  7
             (0, 3, 0), ( 0, -3,  0), //  8,  9
             (0, 0, 3), ( 0,  0, -3), // 10, 11

             (2, 1, 0), (2, -1,  0), (-2,  1, 0), (-2, -1,  0), // 12, 13, 14, 15
             (2, 0, 1), (2,  0, -1), (-2,  0, 1), (-2,  0, -1), // 16, 17, 18, 19
             (1, 2, 0), (1, -2,  0), (-1,  2, 0), (-1, -2,  0), // 20, 21, 22, 23
             (0, 2, 1), (0,  2, -1), ( 0, -2, 1), ( 0, -2, -1), // 24, 25, 26, 27
             (1, 0, 2), (1,  0, -2), (-1,  0, 2), (-1,  0, -2), // 28, 29, 30, 31
             (0, 1, 2), (0,  1, -2), ( 0, -1, 2), ( 0, -1, -2), // 32, 33, 34, 35

             (1,  1,  1), (-1, 1,  1), ( 1, -1, 1), ( 1,  1, -1), // 36, 37, 38, 39
             (1, -1, -1), (-1, 1, -1), (-1, -1, 1), (-1, -1, -1) // 40, 41, 42, 43

             // // 5
             // (5, 0, 0), (-5,  0,  0), // 44, 45
             // (0, 5, 0), ( 0, -5,  0), // 46, 47
             // (0, 0, 5), ( 0,  0, -5), // 48, 49

             // (4, 1, 0), (4, -1,  0), (-4,  1, 0), (-4, -1,  0), // 50, 51, 52, 53
             // (4, 0, 1), (4,  0, -1), (-4,  0, 1), (-4,  0, -1), // 54, 55, 56, 57
             // (1, 4, 0), (1, -4,  0), (-1,  4, 0), (-1, -4,  0), // 58, 59, 60, 61
             // (0, 4, 1), (0,  4, -1), ( 0, -4, 1), ( 0, -4, -1), // 62, 63, 64, 65
             // (1, 0, 4), (1,  0, -4), (-1,  0, 4), (-1,  0, -4), // 66, 67, 68, 69
             // (0, 1, 4), (0,  1, -4), ( 0, -1, 4), ( 0, -1, -4), // 70, 71, 72, 73

             // (3, 2, 0), (3, -2,  0), (-3,  2, 0), (-3, -2,  0), // 74, 75, 76, 77
             // (3, 0, 2), (3,  0, -2), (-3,  0, 2), (-3,  0, -2), // 78, 79, 80, 81
             // (2, 3, 0), (2, -3,  0), (-2,  3, 0), (-2, -3,  0), // 82, 83, 84, 85
             // (0, 3, 2), (0,  3, -2), ( 0, -3, 2), ( 0, -3, -2), // 86, 87, 88, 89
             // (2, 0, 3), (2,  0, -3), (-2,  0, 3), (-2,  0, -3), // 90, 91, 92, 93
             // (0, 2, 3), (0,  2, -3), ( 0, -2, 3), ( 0, -2, -3), // 94, 95, 96, 97

             // (3,  1,  1), (-3, 1,  1), ( 3, -1, 1), ( 3,  1, -1), //  98,  99, 100, 101
             // (3, -1, -1), (-3, 1, -1), (-3, -1, 1), (-3, -1, -1), // 102, 103, 104, 105
             // (1,  3,  1), (-1, 3,  1), ( 1, -3, 1), ( 1,  3, -1), // 106, 107, 108, 109
             // (1, -3, -1), (-1, 3, -1), (-1, -3, 1), (-1, -3, -1), // 110, 111, 112, 113
             // (1,  1,  3), (-1, 1,  3), ( 1, -1, 3), ( 1,  1, -3), // 114, 115, 116, 117
             // (1, -1, -3), (-1, 1, -3), (-1, -1, 3), (-1, -1, -3), // 118, 119, 120, 121

             // (2,  2,  1), (-2, 2,  1), ( 2, -2, 1), ( 2,  2, -1), // 122, 123, 124, 125
             // (2, -2, -1), (-2, 2, -1), (-2, -2, 1), (-2, -2, -1), // 126, 127, 128, 129
             // (2,  1,  2), (-2, 1,  2), ( 2, -1, 2), ( 2,  1, -2), // 130, 131, 132, 133
             // (2, -1, -2), (-2, 1, -2), (-2, -1, 2), (-2, -1, -2), // 134, 135, 136, 137
             // (1,  2,  2), (-1, 2,  2), ( 1, -2, 2), ( 1,  2, -2), // 138, 139, 140, 141
             // (1, -2, -2), (-1, 2, -2), (-1, -2, 2), (-1, -2, -2), // 142, 143, 144, 145

             // // 0
             // (0, 0, 0),

             // // 2
             // (2, 0, 0), (-2,  0,  0),
             // (0, 2, 0), ( 0, -2,  0),
             // (0, 0, 2), ( 0,  0, -2),

             // (1, 1, 0), (1, -1,  0), (-1,  1, 0), (-1, -1,  0),
             // (1, 0, 1), (1,  0, -1), (-1,  0, 1), (-1,  0, -1),
             // (0, 1, 1), (0,  1, -1), ( 0, -1, 1), ( 0, -1, -1),

             // // 4
             // (4, 0, 0), (-4,  0,  0),
             // (0, 4, 0), ( 0, -4,  0),
             // (0, 0, 4), ( 0,  0, -4),

             // (3, 1, 0), (3, -1,  0), (-3,  1, 0), (-3, -1,  0),
             // (3, 0, 1), (3,  0, -1), (-3,  0, 1), (-3,  0, -1),
             // (1, 3, 0), (1, -3,  0), (-1,  3, 0), (-1, -3,  0),
             // (0, 3, 1), (0,  3, -1), ( 0, -3, 1), ( 0, -3, -1),
             // (1, 0, 3), (1,  0, -3), (-1,  0, 3), (-1,  0, -3),
             // (0, 1, 3), (0,  1, -3), ( 0, -1, 3), ( 0, -1, -3),

             // (2, 2, 0), (2, -2,  0), (-2,  2, 0), (-2, -2,  0),
             // (2, 0, 2), (2,  0, -2), (-2,  0, 2), (-2,  0, -2),
             // (0, 2, 2), (0,  2, -2), ( 0, -2, 2), ( 0, -2, -2),

             // (2,  1,  1), (-2, 1,  1), ( 2, -1, 1), ( 2,  1, -1),
             // (2, -1, -1), (-2, 1, -1), (-2, -1, 1), (-2, -1, -1),
             // (1,  2,  1), (-1, 2,  1), ( 1, -2, 1), ( 1,  2, -1),
             // (1, -2, -1), (-1, 2, -1), (-1, -2, 1), (-1, -2, -1),
             // (1,  1,  2), (-1, 1,  2), ( 1, -1, 2), ( 1,  1, -2),
             // (1, -1, -2), (-1, 1, -2), (-1, -1, 2), (-1, -1, -2)

             )
};

esmb = {
    // n_esmb is the number of mol. in ensemble,
    // should be 1 for standalone calculation
    n_esmb = 1;
    with_old = 0; // with_old = 1 for contineous calc., bef
    //n_esmb = 5000; // more than 1, go for MPI version
    //with_old = 1;
};

mvar = {
    // also modify mvar_update() in "mvar.cc"
    // ny = 20;
    ny = 1; // for PE, number of sample points
    y0 = 0.0; // for PE, starting time [fs]
    y1 = 500.0; // for PE, ending time [fs]
//    y1 = 0.0;
};

pols = {
    // switch between methods
    // afterwards, the post-process go accordingly
    // to ana/seidner or ana/pullerits
    ppar_calc_method = "seidner";
    // ppar_calc_method = "pullerits";
    // output components from different rho_ij
    b_pol_for_each_dpl = false;
};

mpic = {
    // the priority of MPI parallelization
    // if 'esmb', distribute node according to
    // number of samples in ensemble
    // if 'grid', distribute node according to
    // mvar.ny
    partition = "grid";
    // partition = "esmb";
};
